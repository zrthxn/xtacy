<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>{{ title }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#1c1c1c">

    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-132485880-1"></script>

    <script>
        // Global site tag (gtag.js) - Google Analytics
        window.dataLayer = window.dataLayer || [];
        function gtag(){
            dataLayer.push(arguments);
        }
        gtag('js', new Date());
        gtag('config', 'UA-132485880-1');
    </script>

    <link rel="stylesheet" type="text/css" media="screen" href="/static/css/Global.css" />
    <link rel="shortcut icon" type="image/png" href="/static/img/favicon.png"/>
    <link rel="shortcut icon" type="image/png" href="https://cdn.xtacy.org/p/faviconpng/"/>

    <script src="/static/js/secu.js"></script>
    <script src="/static/js/config.js"></script>

    <script>
        (()=>{
            validateToken()
                .then((r)=>{
                    if (r==='CSR_TOKEN_VALID')
                        console.log('SR Tokens Verified');
                    else if (r==='CSR_TOKEN_GEN')
                        console.log('SR Tokens Generated');
                    else if (r==='CSR_TOKEN_RENEW')
                        console.log('SR Tokens Renewed');
                    else if (r==='CSR_TIME_VALID')
                        console.log('SR Tokens Valid');
                    generateSecurityFluff(4);
                }).catch((e)=>{
                    console.log(e);
                    if (e==='CSR_TOKEN_INVALID') window.location = '/';
                });
        })()

        function getEventData(_eventId, callback) {
            if (_eventId===undefined) throw 'EVTID_INVALID';
            const eventReq = new XMLHttpRequest();
            eventReq.open('GET', '/register/_eventData/' + _eventId + '/', true);
            eventReq.send();

            eventReq.onreadystatechange = () => {
                if(eventReq.readyState===4 && eventReq.status===200) {
                    let eventRes = JSON.parse(eventReq.response);
                    if(eventRes.validation) {
                        for (let i = 0; i < eventRes.arb; i++) 
                            eventRes.data = atob(eventRes.data)
                        eventRes.data = JSON.parse(eventRes.data)
                        callback(eventRes.data);
                    } else {
                        throw 'CSRF_INVALID';
                    }
                }
            }
        }

        function getEventHash(type, eventId, callback) {
            const hashReq = new XMLHttpRequest();
            hashReq.open('POST', '/register/_checksum/', true);
            hashReq.setRequestHeader('Content-Type', 'application/json');
            hashReq.send(JSON.stringify({ "data": 
                btoa(JSON.stringify({
                    type: type,
                    id: eventId
                }))
            }));
            
            hashReq.onreadystatechange = () => {
                if(hashReq.readyState===4 && hashReq.status===200) {
                    callback(JSON.parse(hashReq.response).checksum);
                }
            }
        }
    </script>

    <script>
        var parallaxConfig = {
                // enable parallax effect for horizontal, vertical or both directions
                horizontalParallax: true,
                verticalParallax: true,
                
                // enable or disable parallax effect for elements or backgrounds
                parallaxBackgrounds: true,
                parallaxElements: true,
                
                // set which positioning property is to be used
                // options include 'position' or 'transform' using css transformations
                positionProperty: 'transform',
                
                // enable for responsive layouts
                // (upon orientation changes or window resizing element positions are reevaluated
                responsive: true,
                
                // enable or disable mouse or gyroscope data as input for the plugin
                useMouseMove: true,
                useGyroscope: true,
                
                // use a Low Pass Filter to smooth sensor readings (1 = no filter)
                alphaFilter: 0.75,
                
                // set which motion type algorithm is to be used
                // options include 'natural', 'linear', 'gaussian', or 'performance'
                motionType: 'performance',
                mouseMotionType: 'gaussian',
                
                // define which sensor input has priority over the other
                // options are either 'mouse' or 'gyroscope'
                inputPriority: 'mouse',
                
                // define the delta angle (0 < motionAngle < 90) 
                // that is used to render max parallax in this direction
                motionAngleX: 45,
                motionAngleY: 45,
                
                // enable of adjustment of base position (using a Low Pass Filter)
                // (adapting to device usage while plugin is running)
                adjustBasePosition: true,
                // alpha for Low Pass Filter used to adjust average position
                alphaPosition: 0.05,
            };
    </script>
</head>
<body>
    {{{ body }}}
</body>
</html>